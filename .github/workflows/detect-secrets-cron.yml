name: detect-secrets (weekly)

on:
  schedule:
    - cron: '0 3 * * 1'  # every Monday at 03:00 UTC

jobs:
  detect-secrets-weekly:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install detect-secrets
        run: python -m pip install detect-secrets==1.4.0
      - name: Run detect-secrets
        run: |
          python -m pip install detect-secrets==1.4.0
          chmod +x scripts/ci/run_detect_secrets.sh
          # run but do not fail the workflow immediately; we will inspect output and create an issue if needed
          ./scripts/ci/run_detect_secrets.sh || true

      - name: Check detect-secrets output
        id: check
        run: |
          chmod +x scripts/ci/check_detect_output.sh
          ./scripts/ci/check_detect_output.sh

      - name: Create or update issue if secrets found
        if: steps.check.outputs.found == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const title = 'Security: detect-secrets found potential secrets (automated)';
            const r = JSON.parse(fs.readFileSync('/tmp/detect_output.json'));
            let summary = 'Automated detect-secrets scan found potential secrets in the repository. Please review the baseline and the findings below.\n\n';
            summary += 'Findings summary:\n';
            for (const [file, entries] of Object.entries(r.results)) {
              if (entries.length > 0) summary += `- ${file}: ${entries.length} potential secrets\n`;
            }

            // Determine severity: if any finding originates from a high-risk detector
            const criticalDetectors = new Set([
              'PrivateKeyDetector',
              'AWSKeyDetector',
              'GitHubTokenDetector',
              'JwtTokenDetector',
              'SlackDetector',
              'StripeDetector',
              'TwilioKeyDetector',
              'NpmDetector'
            ]);
            let hasCritical = false;
            for (const entries of Object.values(r.results)) {
              for (const e of entries) {
                if (e.type && criticalDetectors.has(e.type)) {
                  hasCritical = true;
                  break;
                }
                // some detectors present as 'detector_name' or have keywords; be conservative
                if (e.detector_name && criticalDetectors.has(e.detector_name)) {
                  hasCritical = true;
                  break;
                }
              }
              if (hasCritical) break;
            }

            const labels = ['security/detect-secrets'];
            if (hasCritical) labels.push('security/critical');

            // Search for an existing open issue with the same title
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100,
            });

            const existing = issues.find(i => i.title === title);
            if (existing) {
              // Add a comment to the existing issue instead of creating a new one
              const commentBody = (hasCritical ? `@${context.repo.owner} Automated weekly scan detected new CRITICAL findings. Please review immediately.\n\n` : 'Automated weekly scan detected new findings. Please review the updated findings below:\n\n') + summary;
              await github.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existing.number,
                body: commentBody,
              });
              // Ensure labels include our labels (merge)
              await github.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existing.number,
                labels,
              });
            } else {
              const createBody = (hasCritical ? `@${context.repo.owner} Automated weekly scan detected CRITICAL findings. Please review immediately.\n\n` : '') + summary;
              const newIssue = await github.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title,
                body: createBody,
                labels,
              });
              // If critical, assign to repo owner
              if (hasCritical) {
                await github.issues.addAssignees({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: newIssue.data.number,
                  assignees: [context.repo.owner],
                });
              }
            }
